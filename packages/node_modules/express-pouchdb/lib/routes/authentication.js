"use strict";

const cookieParser = require('cookie-parser'),
    basicAuth    = require('basic-auth'),
    utils        = require('../utils'),
    Auth         = require('pouchdb-auth');

const SECTION = 'couch_httpd_auth';

module.exports = app => {
  let usersDBPromise, refreshUsersDBImpl;

  utils.requires(app, 'config-infrastructure');
  utils.requires(app, 'logging-infrastructure');

  app.couchConfig.registerDefault(SECTION, 'authentication_db', '_users');
  app.couchConfig.registerDefault(SECTION, 'timeout', 600);
  app.couchConfig.registerDefault(SECTION, 'secret', Auth.generateSecret());
  app.couchConfig.registerDefault(SECTION, 'iterations', 10);
  app.couchConfig.registerDefault(SECTION, 'allow_persistent_cookies', false);



    const logSuccess = (type, session) => {
      const msg = `Successful ${type} auth as: "${session.userCtx.name}"`;
      app.couchLogger.debug(msg);
    };

    const buildCookieSession = (req, res) => {
      const sessionID = (req.cookies || {}).AuthSession;
      if (!sessionID) {
        throw new Error("No cookie, so no cookie auth.");
      }
      return getUsersDB().then(db => {
        return db.multiUserSession(sessionID);
      }).then(session => {
        if (session.info.authenticated) {
          let cookieOptions = {httpOnly: true};
          if (app.couchConfig.get(SECTION, 'allow_persistent_cookies') === true) {
            cookieOptions['maxAge'] = app.couchConfig.get(SECTION, 'timeout');
          }
          res.cookie('AuthSession', session.sessionID, cookieOptions);
          delete session.sessionID;
          session.info.authenticated = 'cookie';
          logSuccess('cookie', session);
        }
        return session;
      });
    };

  const buildBasicAuthSession = req => {
        const userInfo = basicAuth(req);
        let db;
        let initializingDone = getUsersDB().then(theDB => {
            db = theDB;
        });
        if (userInfo) {
            initializingDone = initializingDone.then(() => {
                return db.multiUserLogIn(userInfo.name, userInfo.pass);
            });
        }
        return initializingDone.then(info => {
            return db.multiUserSession((info || {}).sessionID);
        }).then(session => {
            delete session.sessionID;

            if (session.info.authenticated) {
                session.info.authenticated = 'default';
                logSuccess('http basic', session);
            }
            return session;
        });
    };

  // explain how to activate the auth db logic.
  app.dbWrapper.registerWrapper((name, db, next) => {
    if (name === getUsersDBName()) {
      return db.useAsAuthenticationDB({
          isOnlineAuthDB: false,
          timeout: app.couchConfig.get(SECTION, 'timeout'),
          secret: app.couchConfig.get(SECTION, 'secret'),
          iterations: app.couchConfig.get(SECTION, 'iterations'),
          admins: app.couchConfig.getSection('admins')
      });
    }
    return next();
  });

  app.daemonManager.registerDaemon({
    start: (PouchDB) => {
      PouchDB.plugin(Auth);

      refreshUsersDBImpl = () => {
        usersDBPromise = utils.getUsersDB(app, PouchDB);
      };
      refreshUsersDB();
      PouchDB.on('destroyed', onDestroyed);
    },
    stop: (PouchDB) => {
      PouchDB.removeListener('destroyed', onDestroyed);
    }
  });

  // utils
  const getUsersDBName = utils.getUsersDBName.bind(null, app);

  const getUsersDB = () => {
    // calls itself until usersDBPromise is a available
    if (!usersDBPromise) {
      return new Promise(resolve => {
        setImmediate(() => {
          resolve(getUsersDB());
        });
      });
    }
    return usersDBPromise;
  };

  const onDestroyed = dbName => {
    // if the users db was removed, it should re-appear.
    if (dbName === getUsersDBName()) {
      refreshUsersDB();
    }
  };

  const refreshUsersDB = () => refreshUsersDBImpl();

  // ensure there's always a users db
  app.couchConfig.on(`${SECTION}.authentication_db`, refreshUsersDB);
  app.couchConfig.on(`${SECTION}.timeout`, refreshUsersDB);
  app.couchConfig.on(`${SECTION}.secret`, refreshUsersDB);
  app.couchConfig.on(`${SECTION}.iterations`, refreshUsersDB);
  app.couchConfig.on(`${SECTION}.allow_persistent_cookies`, refreshUsersDB);
  app.couchConfig.on('admins', refreshUsersDB);

  // routing
  app.use(cookieParser());

  app.use((req, res, next) => {
    // TODO: TIMING ATTACK
    Promise.resolve()
      .then(() => buildCookieSession(req, res))
      .catch(() => buildBasicAuthSession(req))
      .then(result => {
        req.couchSession = result;
        req.couchSession.info.authentication_handlers = ['cookie', 'default'];
        next();
      })
      .catch(err => {
        utils.sendError(res, err);
      });
  });






};
